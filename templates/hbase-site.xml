<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
     /**
 * Copyright 2010 The Apache Software Foundation
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<configuration>
<property>
    <name>hbase.rootdir</name>
    <value>hdfs://{{ hdfs_nameservice_id }}/hbase</value>
</property>
<property>
    <name>hbase.cluster.distributed</name>
    <value>true</value>
</property>
<property>
    <name>hbase.tmp.dir</name>
    <value>{{ hbase_var_prefix }}</value>
</property>
<property>
    <name>hbase.zookeeper.quorum</name>
    <value>{{ zookeeper_quorum }}</value>
</property>
<property>
    <name>hbase.client.keyvalue.maxsize</name>
    <value>{{ hbase_client_keyvalue_maxsize }}</value>
    <description>Specifies the combined maximum allowed size of a KeyValue instance. This is to set an upper boundary for a single entry saved in a storage file. Since they cannot be split it helps avoiding that a region cannot be split any further because the data is too large. It seems wise to set this to a fraction of the maximum region size. Setting it to zero or less disables the check. </description>
</property>
<property>
    <name>hbase.thrift.maxQueuedRequests</name>
    <value>{{ hbase_thrift_maxqueuedrequests }}</value>
</property>
<property>
    <name>hbase.thrift.minWorkerThreads</name>
    <value>{{ hbase_thrift_minworkerthreads }}</value>
</property>
<property>
    <name>hbase.thrift.maxWorkerThreads</name>
    <value>{{ hbase_thrift_maxworkerthreads }}</value>
</property>
<property>
    <name>hbase.regionserver.handler.count</name>
    <value>{{ hbase_regionserver_handler_count }}</value>
</property>
<property>
    <name>hbase.online.schema.update.enable</name>
    <value>true</value>
</property>
<!-- 
         WAL
-->
<property>
    <name>hbase.regionserver.optionallogflushinterval</name>
    <value>1000</value>
</property>
<!--
         Memory usage
-->
<property>
    <name>hbase.regionserver.global.memstore.upperLimit</name>
    <value>0.4</value>
</property>
<property>
    <name>hbase.regionserver.global.memstore.lowerLimit</name>
    <value>0.35</value>
</property>
<property>
    <name>hfile.block.cache.size</name>
    <value>{{ hfile_block_cache_size }}</value>
</property>
<property>
    <!-- @see https://issues.apache.org/jira/browse/HBASE-5074 -->
    <name>hbase.regionserver.checksum.verify</name>
    <value>true</value>
</property>
<property>
    <name>hbase.snapshot.enabled</name>
    <value>true</value>
</property>
<property>
    <name>hbase.hstore.compaction.min.size</name>
    <value>{{ hbase_hstore_compaction_min_size }}</value>
</property>
<property>
    <name>hbase.hregion.majorcompaction</name>
    <value>{{ hbase_majorcompaction_interval }}</value>
</property>
<property>
    <name>hbase.hstore.compaction.max.size</name>
    <value>{{ hbase_hstore_compaction_max_size }}</value>
</property>
<property>
    <name>hbase.master.info.port</name>
    <value>{{ hbase_master_info_port }}</value>
</property>
<property>
    <name>hbase.regionserver.port</name>
    <value>{{ hbase_regionserver_port }}</value>
</property>
<property>
    <name>hbase.master.port</name>
    <value>{{ hbase_master_port }}</value>
</property>
<property>
    <name>hbase.zookeeper.leaderport</name>
    <value>{{ zookeeper_leaderport }}</value>
</property>
<property>
    <name>hbase.zookeeper.peerport</name>
    <value>{{ zookeeper_peerport }}</value>
</property>
<property>
    <name>hbase.zookeeper.property.clientPort</name>
    <value>{{ zookeeper_client_port }}</value>
</property>
<property>
    <name>hbase.regionserver.info.port</name>
    <value>{{ hbase_regionserver_info_port }}</value>
</property>
{% if hbase_regionserver_thrift_framed is defined and hbase_regionserver_thrift_framed %}
<property>
    <name>hbase.regionserver.thrift.framed</name>
    <value>true</value>
 </property>
{% endif %}
<property>
    <name>hbase.regionserver.thrift.port</name>
    <value>{{ hbase_thrift_port }}</value>
</property>
<property>
    <name>hbase.thrift.info.port</name>
    <value>{{ hbase_thrift_info_port }}</value>
</property>
<property>
    <name>hbase.client.scanner.timeout.period</name>
    <value>{{ hbase_scanner_timeout }}</value>
</property>
<property>
    <name>hbase.rpc.timeout</name>
    <value>{{ hbase_rpc_timeout }}</value>
</property>
{% if phoenix_enabled %}
<property>
    <name>phoenix.query.maxGlobalMemoryPercentage</name>
    <value>{{ hbase_phoenix_memory_percentage }}</value>
</property>
<property>
    <name>phoenix.query.threadPoolSize</name>
    <value>{{ hbase_phoenix_query_threadPoolSize }}</value>
</property>
<property>
    <name>phoenix.query.queueSize</name>
    <value>{{ hbase_phoenix_query_queueSize }}</value>
</property>
<property>
    <name>phoenix.index.failure.unhandled.killserver</name>
    <value>{{ phoenix_index_failure }}</value>
</property>
{% endif %}
<property>
    <name>hbase.regionserver.wal.codec</name>
    <value>org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec</value>
</property>
<property>
    <name>hbase.region.server.rpc.scheduler.factory.class</name>
    <value>org.apache.hadoop.hbase.ipc.PhoenixRpcSchedulerFactory</value>
    <description>Factory to create the Phoenix RPC Scheduler that uses separate queues for index and metadata updates</description>
</property>
<property>
    <name>hbase.rpc.controllerfactory.class</name>
    <value>org.apache.hadoop.hbase.ipc.controller.ServerRpcControllerFactory</value>
    <description>Factory to create the Phoenix RPC Scheduler that uses separate queues for index and metadata updates</description>
</property>
{% if phoenix_enabled %}
<property>
    <name>phoenix.query.timeoutMs</name>
    <value>{{ hbase_phoenix_query_timeout }}</value>
</property>
<property>
    <name>phoenix.query.force.rowkeyorder</name>
    <value>{{ hbase_phoenix_query_force_rowkeyorder }}</value>
</property>
<property>
    <name>phoenix.stats.guidepost.width</name>
    <value>{{ hbase_phoenix_stats_guidepost_width }}</value>
</property>
<property>
    <name>phoenix.trace.frequency</name>
    <value>always</value>
</property>
<property>
    <name>phoenix.coprocessor.maxServerCacheTimeToLiveMs</name>
    <value>60000</value>
</property>
{% endif %}
<property>
    <name>hbase.regionserver.info.bindAddress</name>
    <value>{{ ansible_host }}</value>
</property>
<property>
    <name>hbase.storescanner.parallel.seek.enable</name>
    <value>true</value>
</property>
<property>
    <name>hbase.client.scanner.caching</name>
    <value>{{ hbase_client_scanner_caching }}</value>
</property>
<property>
    <name>hbase.client.scanner.max.result.size</name>
    <value>{{ hbase_client_scanner_max_result_size }}</value>
</property>
<property>
    <name>hbase.regionserver.region.split.policy</name>
    <value>org.apache.hadoop.hbase.regionserver.ConstantSizeRegionSplitPolicy</value>
</property>
</configuration>
